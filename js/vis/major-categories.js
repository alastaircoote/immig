// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(["d3"], function(d3) {
    var MajorCategories;
    return MajorCategories = (function() {

      function MajorCategories(el) {
        this.el = el;
        this.setPosition = __bind(this.setPosition, this);

        this.onResize = __bind(this.onResize, this);

        this.tick = __bind(this.tick, this);

        this.hide = __bind(this.hide, this);

        this.show = __bind(this.show, this);

        this.createNameLabel = __bind(this.createNameLabel, this);

        this.createValueLabel = __bind(this.createValueLabel, this);

        this.createCircle = __bind(this.createCircle, this);

        this.draw = __bind(this.draw, this);

        this.loadData = __bind(this.loadData, this);

        this.svg = d3.select(this.el[0]).append("svg");
        this.loaded = false;
        this.showOnLoad = false;
        this.onResize();
        this.loadData(this.draw);
        $(window).on("resize", this.onResize);
      }

      MajorCategories.prototype.loadData = function(cb) {
        var _this = this;
        return d3.json("data/majors.json", function(err, json) {
          if (err) {
            throw err;
          }
          json.forEach(function(a, i) {
            a.radius = Math.sqrt(a.value) / 2;
            a.x = _this.sourcePoint.x + (Math.random() * 60);
            a.sourceX = a.x;
            return delete a.y;
          });
          _this.data = json;
          _this.loaded = true;
          cb();
          if (_this.showOnLoad) {
            return _this.show();
          }
        });
      };

      MajorCategories.prototype.draw = function() {
        var self;
        this.force = d3.layout.force().size([600, $(window).height()]).on("tick", this.tick).nodes(this.data).charge(function(d) {
          return -Math.pow(d.radius, 2.0) / 6;
        });
        self = this;
        this.baseG = this.svg.append("g").attr("id", "major-categories");
        this.setPosition();
        this.onResize();
        return this.groups = this.baseG.selectAll(".major").data(this.data).enter().append("g").each(function(d) {
          var g;
          g = d3.select(this);
          g.attr("class", "major");
          g.attr("transform", function(d) {
            return "translate(" + d.x + "," + d.y + ")";
          });
          self.createCircle(d, g);
          self.createValueLabel(d, g);
          return self.createNameLabel(d, g);
        });
      };

      MajorCategories.prototype.createCircle = function(d, g) {
        return g.append("circle").attr("r", d.radius);
      };

      MajorCategories.prototype.createValueLabel = function(d, g) {
        var text,
          _this = this;
        text = g.append("text").attr("class", "value").text(function(d) {
          return _this.roundValue(d.value);
        });
        if (d.isBig && 1 === 2) {
          return text.style("font-size", "70px").style("text-anchor", "start").attr("dx", -260).attr("dy", -10);
        } else {
          return text.style("font-size", function(d) {
            return d.radius / 2 + "px";
          }).attr("dy", function(d) {
            return -(d.radius / 6);
          });
        }
      };

      MajorCategories.prototype.createNameLabel = function(d, g) {
        var text, tspan, word, wordSplit, _i, _len, _results;
        text = g.append("text").attr("class", "label").style("font-size", function(d) {
          return d.radius / 6 + "px";
        }).attr("dy", function(d) {
          return d.radius / 6;
        });
        wordSplit = d.name.split(" ");
        _results = [];
        for (_i = 0, _len = wordSplit.length; _i < _len; _i++) {
          word = wordSplit[_i];
          tspan = text.append("tspan").text(word + " ");
          if (text[0][0].offsetWidth > d.radius * 1.5) {
            tspan.attr("dy", "1em");
            _results.push(tspan.attr("x", 0));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      MajorCategories.prototype.show = function() {
        if (!this.loaded) {
          return this.showOnLoad = true;
        }
        this.currentTransition = "show";
        return this.force.start();
      };

      MajorCategories.prototype.hide = function() {
        this.currentTransition = "hide";
        return this.force.start();
      };

      MajorCategories.prototype.roundValue = function(value) {
        return (Math.round(value / 100) / 10) + "k";
      };

      MajorCategories.prototype.tick = function(e) {
        var _this = this;
        if (this.currentTransition === "hide") {
          this.groups.each(function(d, i) {
            return d.x = d.x + (d.sourceX - d.x) * e.alpha * 1.1;
          });
        }
        return this.groups.attr("transform", function(d) {
          return "translate(" + d.x + "," + d.y + ")";
        });
      };

      MajorCategories.prototype.onResize = function() {
        var middle, rightSide, x, y;
        y = 20;
        middle = this.el.width() / 2;
        rightSide = middle + 512;
        x = rightSide - 610;
        console.log("newX", x);
        this.setPosition(x, null);
        return this.sourcePoint = {
          x: $(window).width() + 100,
          y: $(window).height() / 2
        };
      };

      MajorCategories.prototype.setPosition = function(newLeft, newTop) {
        this.left = newLeft || this.left || 0;
        this.top = newTop || this.top || 0;
        if (this.baseG) {
          return this.baseG.attr("transform", "translate(" + this.left + "," + this.top + ")");
        }
      };

      return MajorCategories;

    })();
  });

}).call(this);
