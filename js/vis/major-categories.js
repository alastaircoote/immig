// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(["d3"], function(d3) {
    var MajorCategories;
    return MajorCategories = (function() {

      function MajorCategories(el) {
        this.el = el;
        this.onResize = __bind(this.onResize, this);

        this.tick = __bind(this.tick, this);

        this.hide = __bind(this.hide, this);

        this.show = __bind(this.show, this);

        this.createNameLabel = __bind(this.createNameLabel, this);

        this.createValueLabel = __bind(this.createValueLabel, this);

        this.createCircle = __bind(this.createCircle, this);

        this.draw = __bind(this.draw, this);

        this.loadData = __bind(this.loadData, this);

        this.svg = d3.select(this.el[0]).append("svg");
        this.loaded = false;
        this.showOnLoad = false;
        this.loadData(this.draw);
      }

      MajorCategories.prototype.loadData = function(cb) {
        var _this = this;
        return d3.json("data/majors.json", function(err, json) {
          if (err) {
            throw err;
          }
          json.forEach(function(a, i) {
            a.radius = Math.sqrt(a.value) / 2;
            a.targetX = a.x;
            a.targetY = a.y;
            if (a.isBig) {
              a.sourceX = a.x + 500;
              a.sourceY = a.y;
              return;
            }
            a.sourceX = a.x - (Math.random() * 600);
            if (a.y < 312) {
              return a.sourceY = a.y - (Math.random() * 600);
            } else {
              return a.sourceY = a.y + (Math.random() * 600);
            }
          });
          _this.data = json;
          _this.loaded = true;
          cb();
          if (_this.showOnLoad) {
            return _this.show();
          }
        });
      };

      MajorCategories.prototype.draw = function() {
        var self,
          _this = this;
        this.force = d3.layout.force().size([500, 400]).on("tick", function(e) {
          return _this.groups.attr("transform", function(d) {
            return "translate(" + d.x + "," + d.y + ")";
          });
        }).nodes(this.data).charge(function(d) {
          return -Math.pow(d.radius, 2.0) / 6;
        });
        self = this;
        this.baseG = this.svg.append("g").attr("id", "major-categories");
        this.onResize();
        return this.groups = this.baseG.selectAll(".major").data(this.data).enter().append("g").each(function(d) {
          var g;
          g = d3.select(this);
          g.attr("class", "major");
          g.attr("transform", function(d) {
            return "translate(" + d.x + "," + d.y + ")";
          });
          self.createCircle(d, g);
          self.createValueLabel(d, g);
          return self.createNameLabel(d, g);
        });
      };

      MajorCategories.prototype.createCircle = function(d, g) {
        return g.append("circle").attr("r", d.radius);
      };

      MajorCategories.prototype.createValueLabel = function(d, g) {
        var text,
          _this = this;
        text = g.append("text").attr("class", "value").text(function(d) {
          return _this.roundValue(d.value);
        });
        if (d.isBig && 1 === 2) {
          return text.style("font-size", "70px").style("text-anchor", "start").attr("dx", -260).attr("dy", -10);
        } else {
          return text.style("font-size", function(d) {
            return d.radius / 2 + "px";
          }).attr("dy", function(d) {
            return d.radius / 4;
          });
        }
      };

      MajorCategories.prototype.createNameLabel = function(d, g) {
        var text,
          _this = this;
        text = g.append("text").attr("class", "label");
        if (d.isBig) {
          text.attr("dx", -140).attr("dy", 10);
          text.append("tspan").text("Computer And");
          text.append("tspan").text("Mathematical").attr("dy", "1em").attr("dx", -104);
          return;
        }
        if (d.name === "Healthcare Practitioners and Technical") {
          text.append("tspan").text("Healthcare Practitioners").attr("dx", 0 - (d.radius + 10)).attr("dy", -5).style("text-anchor", "end");
          return text.append("tspan").text("and Technical").attr("dy", 15).attr("dx", -100);
        } else {
          return text.attr("dy", function(d) {
            if (d.radius < 20) {
              return 5;
            } else {
              return 0;
            }
          }).attr("dx", function(d) {
            return 0 - (d.radius + 10);
          }).text(function(d) {
            return d.name;
          });
        }
      };

      MajorCategories.prototype.show = function() {
        if (!this.loaded) {
          return this.showOnLoad = true;
        }
        this.baseG.attr("class", "visible");
        return this.force.start();
        this.currentTransition = "show";
        this.data.forEach(function(d) {
          d.currentTargetX = d.targetX;
          d.currentTargetY = d.targetY;
          d.x = d.sourceX;
          return d.y = d.sourceY;
        });
        return this.force.start();
      };

      MajorCategories.prototype.hide = function() {
        this.currentTransition = "hide";
        this.data.forEach(function(d) {
          d.currentTargetX = d.sourceX;
          d.currentTargetY = d.sourceY;
          d.x = d.targetX;
          return d.y = d.targetY;
        });
        return this.force.start();
      };

      MajorCategories.prototype.roundValue = function(value) {
        return (Math.round(value / 100) / 10) + "k";
      };

      MajorCategories.prototype.tick = function(e) {
        var _this = this;
        this.groups.each(function(d) {
          var targetX, targetY;
          targetY = 100;
          targetX = 300;
          d.x = d.x + (d.currentTargetX - d.x) * e.alpha * 1.1;
          return d.y = d.y + (d.currentTargetY - d.y) * e.alpha * 1.1;
        });
        this.groups.attr("transform", function(d) {
          return "translate(" + d.x + "," + d.y + ")";
        });
        this.groups.style("opacity", function(d) {
          if (_this.currentTransition === "show") {
            return d.x / d.currentTargetX;
          } else {
            return 0.7 - (d.x / d.currentTargetX);
          }
        });
        if (e.alpha < 0.05) {
          if (this.currentTransition === "show") {
            return this.baseG.attr("class", "visible visible-label");
          } else {
            return this.baseG.attr("class", "visible");
          }
        }
      };

      MajorCategories.prototype.onResize = function() {
        var middle, rightSide, x, y;
        y = 20;
        middle = this.el.width() / 2;
        rightSide = middle + 512;
        x = rightSide - 610;
        return this.baseG.attr("transform", "translate(" + x + "," + y + ")");
      };

      return MajorCategories;

    })();
  });

}).call(this);
